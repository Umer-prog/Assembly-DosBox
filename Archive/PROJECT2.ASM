DOSSEG

;-----------------------------------------------

;STRING MACRO
STR_PRINT MACRO PARAMETER
MOV DX, OFFSET PARAMETER
MOV AH, 9
INT 21H
ENDM

;*************

;DECIMAL INPUT MACRO
CON MACRO DECI
MOV AH,9
LEA DX, INPUT
INT 21H
MOV BX,2                 ;DIVIDING VALUE BY 2
MOV AX,DECIMAL
MOV DX,0
DIV BX
MOV QUO, AX
ADD DX,48
MOV REM,DX
PUSH REM
MOV CX,2                 ;LOOP COUNTER FOR 2 BITS

CONVERT:                 ;CONVERTING REMAINING BITS
MOV AX,QUO               ;MOVING QUO TO AX AGAIN
MOV DX,0
DIV BX
MOV QUO,AX
ADD DX,48
MOV REM,DX
PUSH REM
LOOP CONVERT

MOV SI, OFFSET BINARY
MOV CX, 3

EXTRACT:                 ;EXTRACTING STACK TO ARRAY
POP DX
MOV [SI],DX
INC SI
LOOP EXTRACT
ENDM

;PRINTING
MOV SI,OFFSET BINARY
P1:
MOV DX,[SI]
MOV AH,2
INT 21H
INC SI
LOOP P1
;*************

;DECIMAL INPUT MACRO
CONVO MACRO DECIM
MOV AH,9
LEA DX, INPUT
INT 21H
MOV BX,2                 ;DIVIDING VALUE BY 2
MOV AX,DECIM
MOV DX,0
DIV BX
MOV QUO2, AX
ADD DX,48
MOV REM2,DX
PUSH REM2
MOV CX,2                 ;LOOP COUNTER FOR 2 BITS

CONVERT2:                 ;CONVERTING REMAINING BITS
MOV AX,QUO2               ;MOVING QUO TO AX AGAIN
MOV DX,0
DIV BX
MOV QUO2,AX
ADD DX,48
MOV REM2,DX
PUSH REM2
LOOP CONVERT2

MOV SI, OFFSET BINARY2
MOV CX, 3

EXTRACT2:                 ;EXTRACTING STACK TO ARRAY
POP DX
MOV [SI],DX
INC SI
LOOP EXTRACT2
ENDM

;PRINTING
MOV SI,OFFSET BINARY2
P2:
MOV DX,[SI]
MOV AH,2
INT 21H
INC SI
LOOP P2

;*************

;ADDITION MACRO
ADDITION MACRO VALUE1, VALUE2
MOV AL, VALUE1
MOV DL, VALUE2
ADD DL, AL
SUB DL, 48
MOV AH, 2
INT 21H
ENDM

;SUBTRACTION MACRO
SUBTRACTION MACRO VALUE1, VALUE2
MOV AL, VALUE1
MOV DL, VALUE2
SUB AL, DL
MOV DL, AL
ADD DL, 48
MOV AH, 2
INT 21H
ENDM

;MULTIPLY MACRO
MULTIPLY MACRO VALUE1, VALUE2
MOV AL, VALUE1
MOV DL, VALUE2
SUB AL, 48
SUB DL, 48
MUL DL
AAM
MOV CH, AH
MOV CL, AL
MOV DL, CH
ADD DL, 48
MOV AH, 2
INT 21H
MOV DL, CL
ADD DL, 48
MOV AH, 2
INT 21H
ENDM

;DIVISION MACRO
DIVISION MACRO VALUE1, VALUE2
MOV AX, VALUE1
DIV VALUE2
MOV QUOTIENT, AL
MOV REMAINDER, AH
MOV DL, QUOTIENT
ADD DL, 48
MOV AH, 2
INT 21H
MOV DL, 46
MOV AH, 2
INT 21H
MOV DL, REMAINDER
ADD DL, 48
MOV AH, 2
INT 21H
ENDM

;AND MACRO
AND_GATE MACRO VALUE1,VALUE2
MOV BX,VALUE1
AND BX,VALUE2
MOV DX,BX
ADD DX,48
MOV AH,2
INT 21H
ENDM

;OR MACRO
OR_GATE MACRO VALUE1,VALUE2
MOV BX,VALUE1
OR BX,VALUE2
MOV DX,BX
ADD DX,48
MOV AH,2
INT 21H
ENDM

;NOT MACRO
NOT_GATE MACRO VALUE1
MOV BX,VALUE1
NOT BX
ADD BX,56
MOV DX,BX
MOV AH,2
INT 21H
ENDM

;XOR MACRO
XOR_GATE MACRO VALUE1,VALUE2
MOV BX,VALUE1
XOR BX,VALUE2
MOV DX,BX
ADD DX,48
MOV AH,2
INT 21H
ENDM

;-----------------------------------------------

.MODEL SMALL
.STACK 100H

;-----------------------------------------------

.DATA
OPT1 DB '0. ARITHMETIC OPERATORS$'
OPT2 DB '             1. LOGICAL OPERATORS$'
AO_TITLE DB '                    ARITHMETIC OPERATORS$'
AO_ADD DB '           0. ADD$'
AO_SUB DB '           1. SUB$'
AO_MUL DB '           2. MUL$'
AO_DIV DB '           3. DIV$'
LO_TITLE DB '                     LOGICAL OPERATORS$'
LO_AND DB '           0. AND$'
LO_OR DB '           1. OR $'
LO_NOT DB '           2. NOT$'
LO_XOR DB '           3. XOR$'
REPEAT_TEXT DB '   PRESS 0 TO START AGAIN, PRESS 1 TO TERMINATE PROGRAM$'
PROGEND_TEXT DB '                   THANK YOU FOR USING!$'

INPUT_STR DB 'ENTER NUMBER: $'
FINAL_STR DB 'THE RESULT IS: $'

NUM1 DB ?
NUM2 DB ?
NUM3 DW ?

QUOTIENT DB 0
REMAINDER DB 0

QUO DW ?
QUO2 DW ?
REM DW ?
REM2 DW ?

BINARY1 DW 000B
BINARY2 DW 000B

INP1 DW 0
INP2 DW 0

;-----------------------------------------------

.CODE
MAIN PROC
MOV AX,@DATA
MOV DS,AX

;-----------------------------------------------

START_PROJECT:

CALL FRONT_PAGE

;TAKING INPUT
INPUT_FRONTPAGE:
MOV AH,8
INT 21H
CMP AL,48
JE ARITHMETIC_OPERATORS
CMP AL,49
JE DUMMY_LO1
JMP INPUT_FRONTPAGE

;-----------------------------------------------

DUMMY_LO1:
JMP DUMMY_LO2

JUMP_REPEAT4:
JMP START_PROJECT

ARITHMETIC_OPERATORS:

CALL BLACK_BG
CALL GREEN_BG


;-----------------------------------------------
;-----------------------------------------------


;AO TITLE BOX
MOV AH,6
MOV AL,3
MOV BH, 00001010B
MOV CH, 3
MOV CL, 8
MOV DH, 6
MOV DL, 71
INT 10H

;ADD BOX
MOV AH,6
MOV AL,3
MOV BH, 00001111B
MOV CH, 9
MOV CL, 8
MOV DH, 12
MOV DL, 20
INT 10H

;SUB BOX
MOV CL, 25
MOV DL, 37
INT 10H

;MUL BOX
MOV CL, 42
MOV DL, 54
INT 10H

;DIV BOX
MOV CL, 59
MOV DL, 71
INT 10H

;-----------------------------------------------

;ARITHMETIC TEXT
MOV AH,2
MOV AL,1
MOV BH, 0
MOV CH, 30
MOV CL, 0
MOV DH, 5
MOV DL, 10
INT 10H

STR_PRINT AO_TITLE

CALL NEXTLINE
CALL NEXTLINE
CALL NEXTLINE

STR_PRINT AO_ADD
STR_PRINT AO_SUB
STR_PRINT AO_MUL
STR_PRINT AO_DIV

CALL NEXTLINE
CALL NEXTLINE
CALL NEXTLINE

DUMMY_AO1:
JMP INPUT_ARITHMETIC

JUMP_REPEAT3:
JMP JUMP_REPEAT4

;----------------------------------------------
;-----------------------------------------------

;TAKING INPUT
INPUT_ARITHMETIC:
MOV AH,8
INT 21H
CMP AL,48
JE ADD_METHOD
CMP AL,49
JE SUB_METHOD
JMP DUMMY_AO2
JNE INPUT_ARITHMETIC


;-----------------------------------------------

ADD_METHOD:
STR_PRINT INPUT_STR
MOV AH,1
INT 21H
MOV NUM1, AL
CALL NEXTLINE2
STR_PRINT INPUT_STR
MOV AH,1
INT 21H
MOV NUM2, AL
CALL NEXTLINE2
STR_PRINT FINAL_STR
ADDITION NUM1,NUM2
CALL JUMP_TO_REPEAT
MOV AH,4CH
INT 21H

;-----------------------------------------------

SUB_METHOD:
STR_PRINT INPUT_STR
MOV AH,1
INT 21H
MOV NUM1, AL
CALL NEXTLINE2
STR_PRINT INPUT_STR
MOV AH,1
INT 21H
MOV NUM2, AL
CALL NEXTLINE2
STR_PRINT FINAL_STR
SUBTRACTION NUM1,NUM2
CALL JUMP_TO_REPEAT
MOV AH,4CH
INT 21H

;-----------------------------------------------

DUMMY_AO2:
CMP AL, 50
JE MUL_METHOD
CMP AL, 51
JE DIV_METHOD
JMP INPUT_ARITHMETIC

DUMMY_LO2:
JMP LOGICAL_OPERATORS

JUMP_REPEAT2:
JMP JUMP_REPEAT3

;-----------------------------------------------

MUL_METHOD:
STR_PRINT INPUT_STR
MOV AH,1
INT 21H
MOV NUM1, AL
CALL NEXTLINE2
STR_PRINT INPUT_STR
MOV AH,1
INT 21H
MOV NUM2, AL
CALL NEXTLINE2
STR_PRINT FINAL_STR
MULTIPLY NUM1,NUM2
CALL JUMP_TO_REPEAT
MOV AH,4CH
INT 21H

;-----------------------------------------------

DIV_METHOD:
STR_PRINT INPUT_STR
MOV AH,1
INT 21H
SUB AL, 48
MOV NUM3, AL
CALL NEXTLINE2
STR_PRINT INPUT_STR
MOV AH,1
INT 21H
SUB AL, 48
MOV NUM2, AL
CALL NEXTLINE2
STR_PRINT FINAL_STR
DIVISION NUM3, NUM2
CALL JUMP_TO_REPEAT
MOV AH,4CH
INT 21H


;-----------------------------------------------
;-----------------------------------------------


LOGICAL_OPERATORS:

CALL BLACK_BG
CALL GREEN_BG

;-----------------------------------------------

;LO TITLE BOX
MOV AH,6
MOV AL,3
MOV BH, 00001010B
MOV CH, 3
MOV CL, 8
MOV DH, 6
MOV DL, 71
INT 10H

;AND BOX
MOV AH,6
MOV AL,3
MOV BH, 00001111B
MOV CH, 9
MOV CL, 8
MOV DH, 12
MOV DL, 20
INT 10H

;OR BOX
MOV CL, 25
MOV DL, 37
INT 10H

;NOT BOX
MOV CL, 42
MOV DL, 54
INT 10H

;XOR BOX
MOV CL, 59
MOV DL, 71
INT 10H

;-----------------------------------------------

;LOGICAL TEXT
MOV AH,2
MOV AL,1
MOV BH, 0
MOV CH, 30
MOV CL, 0
MOV DH, 5
MOV DL, 10
INT 10H

STR_PRINT LO_TITLE

CALL NEXTLINE
CALL NEXTLINE
CALL NEXTLINE

STR_PRINT LO_AND
STR_PRINT LO_OR
STR_PRINT LO_NOT
STR_PRINT LO_XOR

CALL NEXTLINE
CALL NEXTLINE

;-----------------------------------------------

;TAKING INPUT
INPUT_LOGICAL:
MOV AH,8
INT 21H
CMP AL,48
JE AND_METHOD
CMP AL,49
JE OR_METHOD
JMP DUMMY_LO3
JNE INPUT_LOGICAL

;-----------------------------------------------

;AND GATE
AND_METHOD:
CALL NEXTLINE
STR_PRINT INPUT_STR
MOV AH,1
INT 21H
MOV INP1, AL
CALL NEXTLINE2
CON INP1
CALL NEXTLINE2
STR_PRINT INPUT_STR
MOV AH,1
INT 21H
MOV INP2, AL
CALL NEXTLINE2
CONVO INP2
CALL NEXTLINE2
STR_PRINT FINAL_STR
AND_GATE INP1,INP2
CALL JUMP_TO_REPEAT
MOV AH,4CH
INT 21H

;-----------------------------------------------

;OR GATE
OR_METHOD:
CALL NEXTLINE
STR_PRINT INPUT_STR
MOV AH,1
INT 21H
;MOV INP1, AL
CALL NEXTLINE2
STR_PRINT INPUT_STR
MOV AH,1
INT 21H
;MOV INP2, AL
CALL NEXTLINE2
STR_PRINT FINAL_STR
OR_GATE INP1,INP2
CALL JUMP_TO_REPEAT
MOV AH,4CH
INT 21H

;-----------------------------------------------

DUMMY_LO3:
CMP AL, 50
JE NOT_METHOD
CMP AL, 51
JE XOR_METHOD
JMP INPUT_LOGICAL

;-----------------------------------------------

;NOT GATE
NOT_METHOD:
CALL NEXTLINE
STR_PRINT INPUT_STR
MOV AH,1
INT 21H
;MOV INP1, AL
CALL NEXTLINE2
STR_PRINT FINAL_STR
NOT_GATE INP1
CALL JUMP_TO_REPEAT
MOV AH,4CH
INT 21H

;-----------------------------------------------

;XOR GATE
XOR_METHOD:
CALL NEXTLINE
STR_PRINT INPUT_STR
MOV AH,1
INT 21H
;MOV INP1, AL
CALL NEXTLINE2
STR_PRINT INPUT_STR
MOV AH,1
INT 21H
;MOV INP2, AL
CALL NEXTLINE2
STR_PRINT FINAL_STR
XOR_GATE INP1,INP2
CALL JUMP_TO_REPEAT
MOV AH,4CH
INT 21H


JUMP_REPEAT1:
JMP JUMP_REPEAT2


;-----------------------------------------------
;-----------------------------------------------


PROG_REPEAT:

CALL BLACK_BG
CALL SHORT_GREEN

;-----------------------------------------------

;REPEAT BOX
MOV AH,6
MOV AL,3
MOV BH, 10001111B
MOV CH, 3
MOV CL, 8
MOV DH, 6
MOV DL, 71
INT 10H

;-----------------------------------------------

;REPEAT TEXT
MOV AH,2
MOV AL,1
MOV BH, 0
MOV CH, 30
MOV CL, 0
MOV DH, 5
MOV DL, 10
INT 10H

STR_PRINT REPEAT_TEXT

CALL NEXTLINE
CALL NEXTLINE

;-----------------------------------------------

;TAKING INPUT
INPUT_REPEAT:
MOV AH,8
INT 21H
CMP AL,48
JE JUMP_REPEAT1
CMP AL,49
JE PROG_END
JMP INPUT_REPEAT

;-----------------------------------------------
;-----------------------------------------------


PROG_END:

CALL BLACK_BG
CALL SHORT_GREEN

;-----------------------------------------------

;PROGEND BOX
MOV AH,6
MOV AL,3
MOV BH, 00001111B
MOV CH, 3
MOV CL, 8
MOV DH, 6
MOV DL, 71
INT 10H

;-----------------------------------------------

;PROGEND TEXT
MOV AH,2
MOV AL,1
MOV BH, 0
MOV CH, 30
MOV CL, 0
MOV DH, 5
MOV DL, 10
INT 10H

STR_PRINT PROGEND_TEXT

CALL NEXTLINE
CALL NEXTLINE


;-----------------------------------------------
;-----------------------------------------------

END_PROJ:
MOV AH, 4CH
INT 21H
MAIN ENDP

;-----------------------------------------------

NEXTLINE PROC
MOV CX,2
SPACING:
MOV DX,10
MOV AH,2
INT 21H
MOV DX,13
MOV AH,2
INT 21H
LOOP SPACING
RET
NEXTLINE ENDP

NEXTLINE2 PROC
MOV DX,10,13
MOV AH,2
INT 21H
RET
NEXTLINE2 ENDP


BLACK_BG PROC
MOV AH, 6
MOV AL, 30
MOV BH, 00001111B
MOV CH, 0
MOV CL, 0
MOV DX,184FH
INT 10H
RET
BLACK_BG ENDP

GREEN_BG PROC
MOV AH, 6 
MOV AL, 15
MOV BH, 00101111B
MOV CH, 0
MOV CL, 0
MOV DH, 15
MOV DL, 80
INT 10H
RET
GREEN_BG ENDP

JUMP_TO_REPEAT PROC
MOV AH,1
INT 21H
JMP PROG_REPEAT
RET
JUMP_TO_REPEAT ENDP

JUMP_TO_END PROC
MOV AH,1
INT 21H
JMP PROG_END
RET
JUMP_TO_END ENDP

SHORT_GREEN PROC
MOV AH, 6 
MOV AL, 9
MOV BH, 00101111B
MOV CH, 0
MOV CL, 0
MOV DH, 9
MOV DL, 80
INT 10H
RET
SHORT_GREEN ENDP

FRONT_PAGE PROC
;FRONT PAGE BACKGROUND COLOR
MOV AH, 6
MOV AL, 30
MOV BH, 00101111B
MOV CH, 0
MOV CL, 0
MOV DX,184FH
INT 10H

;1.ALU ROW BOX
MOV AH,6
MOV AL,2
MOV BH, 00001111B
MOV CH, 4
MOV CL, 17
MOV DH, 5
MOV DL, 26
INT 10H

;2.ALU ROW BOX
MOV CH, 8
MOV CL, 17
MOV DH, 9
MOV DL, 26
INT 10H

;3.ALU ROW BOX
MOV CH, 12
MOV CL, 36
MOV DH, 14
MOV DL, 45
INT 10H

;4.ALU ROW BOX
MOV CH, 12
MOV CL, 54
MOV DH, 14
MOV DL, 62
INT 10H

;1.ALU COLUMN BOX
MOV AH,6
MOV AL,3
MOV BH, 00001111B
MOV CH, 4
MOV CL, 15
MOV DH, 6
MOV DL, 17
INT 10H
MOV CH, 6
MOV DH, 8
INT 10H
MOV CH, 8
MOV DH, 10
INT 10H
MOV CH, 10
MOV DH, 12
INT 10H
MOV CH, 12
MOV DH, 14
INT 10H

;2.ALU COLUMN BOX
MOV AH,6
MOV AL,3
MOV BH, 00001111B
MOV CH, 4
MOV CL, 26
MOV DH, 6
MOV DL, 28
INT 10H
MOV CH, 6
MOV DH, 8
INT 10H
MOV CH, 8
MOV DH, 10
INT 10H
MOV CH, 10
MOV DH, 12
INT 10H
MOV CH, 12
MOV DH, 14
INT 10H

;3.ALU COLUMN BOX
MOV AH,6
MOV AL,3
MOV BH, 00001111B
MOV CH, 4
MOV CL, 33
MOV DH, 6
MOV DL, 35
INT 10H
MOV CH, 6
MOV DH, 8
INT 10H
MOV CH, 8
MOV DH, 10
INT 10H
MOV CH, 10
MOV DH, 12
INT 10H
MOV CH, 12
MOV DH, 14
INT 10H

;4.ALU COLUMN BOX
MOV AH,6
MOV AL,3
MOV BH, 00001111B
MOV CH, 4
MOV CL, 51
MOV DH, 6
MOV DL, 53
INT 10H
MOV CH, 6
MOV DH, 8
INT 10H
MOV CH, 8
MOV DH, 10
INT 10H
MOV CH, 10
MOV DH, 12
INT 10H
MOV CH, 12
MOV DH, 14
INT 10H

;5.ALU COLUMN BOX
MOV AH,6
MOV AL,3
MOV BH, 00001111B
MOV CH, 4
MOV CL, 63
MOV DH, 6
MOV DL, 65
INT 10H
MOV CH, 6
MOV DH, 8
INT 10H
MOV CH, 8
MOV DH, 10
INT 10H
MOV CH, 10
MOV DH, 12
INT 10H
MOV CH, 12
MOV DH, 14
INT 10H

;ARITHMETIC BOX
MOV AH,6
MOV AL,3
MOV BH, 00001111B
MOV CH, 19
MOV CL, 7
MOV DH, 21
MOV DL, 37
INT 10H

;LOGICAL BOX
MOV CL, 42
MOV DL, 72
INT 10H

;FRONT PAGE TEXT
MOV AH,2
MOV AL,1
MOV BH, 0
MOV CH, 0
MOV CL, 0
MOV DH, 20
MOV DL, 10
INT 10H

STR_PRINT OPT1
STR_PRINT OPT2

CALL NEXTLINE
CALL NEXTLINE

RET
FRONT_PAGE ENDP


END MAIN
